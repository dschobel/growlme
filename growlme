#!/usr/bin/env python
#
# usage:
#   growlme <command>
#
# Runs <command> in a subshell, and notifies growl of success or failure
# error codes on completion. The success/failure messages can be customized
# on the command line. T
#
# The first (largest) section of this code is Rui Carmo's netgrowl.py:
#   http://the.taoofmac.com/space/Projects/netgrowl
#
# Copyright 2004 Rui Carmo <http://the.taoofmac.com>
# Copyright 2010 Greg Brown <geb@pobox.com>
# Copyright 2010 Robey Pointer <robeypointer@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy
# of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
#
# Edited by zeebo to use growlnotify instead of the UDP network.

import optparse
import subprocess
import sys

if __name__ == '__main__':
    parser = optparse.OptionParser(usage='usage: %prog [options] <command...>')
    parser.disable_interspersed_args()
    parser.add_option("-m", "--message", dest='success_text', metavar='TEXT', help='message to display on success')
    parser.add_option("--fail", dest='fail_text', metavar='TEXT', help='message to display on failure')
    parser.add_option("-t", "--title", dest='title', help='growl title')

    (opts, args) = parser.parse_args()
    if not args:
        parser.error("must provide a command to execute")

    if opts.title is None:
        opts.title = socket.getfqdn() + ": " + " ".join(args)
    if opts.success_text is None:
        opts.success_text = "Succeeded"
    if opts.fail_text is None:
        opts.fail_text = "FAILED"

    process = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, bufsize=-1)
    while True:
        data = process.stdout.read(128)
        if data == "":
            break
        sys.stdout.write(data)
    exit_code = process.wait()
    if exit_code == 0:
        message = opts.success_text
    else:
        message = opts.fail_text
    
    subprocess.call(["growlnotify",opts.title,"-m",message])
